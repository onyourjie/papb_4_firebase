<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/notesapp/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/notesapp/MainActivity.kt" />
              <option name="originalContent" value="package com.example.notesapp&#10;&#10;import android.os.Bundle&#10;import android.widget.Toast&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material.icons.filled.Edit&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.runtime.livedata.observeAsState&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.notesapp.model.Note&#10;import com.example.notesapp.ui.theme.NotesappTheme&#10;import com.example.notesapp.viewmodel.NoteViewModel&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            NotesappTheme {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    NotesApp()&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun NotesApp(noteViewModel: NoteViewModel = viewModel()) {&#10;    val notes by noteViewModel.notes.observeAsState(emptyList())&#10;    val isLoading by noteViewModel.isLoading.observeAsState(false)&#10;    val context = LocalContext.current&#10;&#10;    var title by remember { mutableStateOf(&quot;&quot;) }&#10;    var content by remember { mutableStateOf(&quot;&quot;) }&#10;    var isEditing by remember { mutableStateOf(false) }&#10;    var editingNoteId by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    LaunchedEffect(Unit) {&#10;        noteViewModel.fetchNotes()&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Notes App&quot;) },&#10;                colors = TopAppBarDefaults.topAppBarColors(&#10;                    containerColor = MaterialTheme.colorScheme.primaryContainer,&#10;                    titleContentColor = MaterialTheme.colorScheme.onPrimaryContainer&#10;                )&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(16.dp)&#10;        ) {&#10;            // Form Input&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = if (isEditing) &quot;Edit Catatan&quot; else &quot;Tambah Catatan Baru&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    OutlinedTextField(&#10;                        value = title,&#10;                        onValueChange = { title = it },&#10;                        label = { Text(&quot;Judul&quot;) },&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    OutlinedTextField(&#10;                        value = content,&#10;                        onValueChange = { content = it },&#10;                        label = { Text(&quot;Konten&quot;) },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(120.dp),&#10;                        maxLines = 5&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                    ) {&#10;                        Button(&#10;                            onClick = {&#10;                                if (isEditing) {&#10;                                    noteViewModel.updateNote(&#10;                                        noteId = editingNoteId,&#10;                                        title = title,&#10;                                        content = content,&#10;                                        onSuccess = {&#10;                                            Toast.makeText(context, &quot;Catatan berhasil diupdate&quot;, Toast.LENGTH_SHORT).show()&#10;                                            title = &quot;&quot;&#10;                                            content = &quot;&quot;&#10;                                            isEditing = false&#10;                                            editingNoteId = &quot;&quot;&#10;                                        },&#10;                                        onError = { error -&gt;&#10;                                            Toast.makeText(context, error, Toast.LENGTH_SHORT).show()&#10;                                        }&#10;                                    )&#10;                                } else {&#10;                                    noteViewModel.addNote(&#10;                                        title = title,&#10;                                        content = content,&#10;                                        onSuccess = {&#10;                                            Toast.makeText(context, &quot;Catatan berhasil ditambahkan&quot;, Toast.LENGTH_SHORT).show()&#10;                                            title = &quot;&quot;&#10;                                            content = &quot;&quot;&#10;                                        },&#10;                                        onError = { error -&gt;&#10;                                            Toast.makeText(context, error, Toast.LENGTH_SHORT).show()&#10;                                        }&#10;                                    )&#10;                                }&#10;                            },&#10;                            modifier = Modifier.weight(1f)&#10;                        ) {&#10;                            Text(if (isEditing) &quot;Update Catatan&quot; else &quot;Simpan Catatan&quot;)&#10;                        }&#10;&#10;                        if (isEditing) {&#10;                            OutlinedButton(&#10;                                onClick = {&#10;                                    title = &quot;&quot;&#10;                                    content = &quot;&quot;&#10;                                    isEditing = false&#10;                                    editingNoteId = &quot;&quot;&#10;                                },&#10;                                modifier = Modifier.weight(1f)&#10;                            ) {&#10;                                Text(&quot;Batal&quot;)&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // Daftar Catatan&#10;            Text(&#10;                text = &quot;Daftar Catatan&quot;,&#10;                style = MaterialTheme.typography.titleLarge,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            if (isLoading) {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    CircularProgressIndicator()&#10;                }&#10;            } else if (notes.isEmpty()) {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Belum ada catatan.\nTambahkan catatan pertama Anda!&quot;,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            } else {&#10;                LazyColumn(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    items(notes) { note -&gt;&#10;                        NoteItem(&#10;                            note = note,&#10;                            onEdit = {&#10;                                title = note.title&#10;                                content = note.content&#10;                                isEditing = true&#10;                                editingNoteId = note.id&#10;                            },&#10;                            onDelete = {&#10;                                noteViewModel.deleteNote(&#10;                                    noteId = note.id,&#10;                                    onSuccess = {&#10;                                        Toast.makeText(context, &quot;Catatan berhasil dihapus&quot;, Toast.LENGTH_SHORT).show()&#10;                                    },&#10;                                    onError = { error -&gt;&#10;                                        Toast.makeText(context, error, Toast.LENGTH_SHORT).show()&#10;                                    }&#10;                                )&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun NoteItem(&#10;    note: Note,&#10;    onEdit: () -&gt; Unit,&#10;    onDelete: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = note.title,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;&#10;                Row {&#10;                    IconButton(onClick = onEdit) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Edit,&#10;                            contentDescription = &quot;Edit&quot;,&#10;                            tint = MaterialTheme.colorScheme.primary&#10;                        )&#10;                    }&#10;                    IconButton(onClick = onDelete) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Delete,&#10;                            contentDescription = &quot;Delete&quot;,&#10;                            tint = MaterialTheme.colorScheme.error&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;&#10;            Text(&#10;                text = note.content,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Text(&#10;                text = formatTimestamp(note.timestamp),&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;fun formatTimestamp(timestamp: Long): String {&#10;    val sdf = SimpleDateFormat(&quot;dd MMM yyyy, HH:mm&quot;, Locale(&quot;id&quot;, &quot;ID&quot;))&#10;    return sdf.format(Date(timestamp))&#10;}&#10;&#10;// ==================== PREVIEW FUNCTIONS ====================&#10;&#10;@Preview(showBackground = true, name = &quot;Notes App - Empty State&quot;)&#10;@Composable&#10;fun PreviewNotesAppEmpty() {&#10;    NotesappTheme {&#10;        Surface(&#10;            modifier = Modifier.fillMaxSize(),&#10;            color = MaterialTheme.colorScheme.background&#10;        ) {&#10;            PreviewNotesAppContent(notes = emptyList())&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true, name = &quot;Notes App - With Data&quot;)&#10;@Composable&#10;fun PreviewNotesAppWithData() {&#10;    NotesappTheme {&#10;        Surface(&#10;            modifier = Modifier.fillMaxSize(),&#10;            color = MaterialTheme.colorScheme.background&#10;        ) {&#10;            PreviewNotesAppContent(&#10;                notes = listOf(&#10;                    Note(&#10;                        id = &quot;1&quot;,&#10;                        title = &quot;Belajar Jetpack Compose&quot;,&#10;                        content = &quot;Compose adalah toolkit modern untuk membuat UI Android dengan Kotlin&quot;,&#10;                        timestamp = System.currentTimeMillis()&#10;                    ),&#10;                    Note(&#10;                        id = &quot;2&quot;,&#10;                        title = &quot;Integrasi Firebase&quot;,&#10;                        content = &quot;Firebase Firestore menyediakan database real-time yang mudah digunakan&quot;,&#10;                        timestamp = System.currentTimeMillis() - 3600000&#10;                    ),&#10;                    Note(&#10;                        id = &quot;3&quot;,&#10;                        title = &quot;MVVM Architecture&quot;,&#10;                        content = &quot;Model-View-ViewModel memisahkan logika bisnis dari UI&quot;,&#10;                        timestamp = System.currentTimeMillis() - 7200000&#10;                    )&#10;                )&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true, name = &quot;Single Note Item&quot;)&#10;@Composable&#10;fun PreviewNoteItem() {&#10;    NotesappTheme {&#10;        NoteItem(&#10;            note = Note(&#10;                id = &quot;1&quot;,&#10;                title = &quot;Judul Catatan Preview&quot;,&#10;                content = &quot;Ini adalah contoh isi dari catatan yang akan ditampilkan. Anda bisa mengedit atau menghapus catatan ini.&quot;,&#10;                timestamp = System.currentTimeMillis()&#10;            ),&#10;            onEdit = {},&#10;            onDelete = {}&#10;        )&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true, name = &quot;Note Item - Long Content&quot;)&#10;@Composable&#10;fun PreviewNoteItemLong() {&#10;    NotesappTheme {&#10;        NoteItem(&#10;            note = Note(&#10;                id = &quot;2&quot;,&#10;                title = &quot;Catatan Panjang&quot;,&#10;                content = &quot;Ini adalah contoh catatan dengan konten yang sangat panjang. &quot; +&#10;                        &quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit. &quot; +&#10;                        &quot;Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. &quot; +&#10;                        &quot;Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris.&quot;,&#10;                timestamp = System.currentTimeMillis() - 86400000&#10;            ),&#10;            onEdit = {},&#10;            onDelete = {}&#10;        )&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true, name = &quot;Form Input - Add Mode&quot;, heightDp = 400)&#10;@Composable&#10;fun PreviewFormAdd() {&#10;    NotesappTheme {&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Tambah Catatan Baru&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                OutlinedTextField(&#10;                    value = &quot;&quot;,&#10;                    onValueChange = {},&#10;                    label = { Text(&quot;Judul&quot;) },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                OutlinedTextField(&#10;                    value = &quot;&quot;,&#10;                    onValueChange = {},&#10;                    label = { Text(&quot;Konten&quot;) },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(120.dp),&#10;                    maxLines = 5&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                Button(&#10;                    onClick = {},&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Text(&quot;Simpan Catatan&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true, name = &quot;Form Input - Edit Mode&quot;, heightDp = 450)&#10;@Composable&#10;fun PreviewFormEdit() {&#10;    NotesappTheme {&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Edit Catatan&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                OutlinedTextField(&#10;                    value = &quot;Belajar Android&quot;,&#10;                    onValueChange = {},&#10;                    label = { Text(&quot;Judul&quot;) },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                OutlinedTextField(&#10;                    value = &quot;Membuat aplikasi NotesApp dengan Firebase Firestore&quot;,&#10;                    onValueChange = {},&#10;                    label = { Text(&quot;Konten&quot;) },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(120.dp),&#10;                    maxLines = 5&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    Button(&#10;                        onClick = {},&#10;                        modifier = Modifier.weight(1f)&#10;                    ) {&#10;                        Text(&quot;Update Catatan&quot;)&#10;                    }&#10;&#10;                    OutlinedButton(&#10;                        onClick = {},&#10;                        modifier = Modifier.weight(1f)&#10;                    ) {&#10;                        Text(&quot;Batal&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun PreviewNotesAppContent(notes: List&lt;Note&gt;) {&#10;    var title by remember { mutableStateOf(&quot;&quot;) }&#10;    var content by remember { mutableStateOf(&quot;&quot;) }&#10;    var isEditing by remember { mutableStateOf(false) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Notes App&quot;) },&#10;                colors = TopAppBarDefaults.topAppBarColors(&#10;                    containerColor = MaterialTheme.colorScheme.primaryContainer,&#10;                    titleContentColor = MaterialTheme.colorScheme.onPrimaryContainer&#10;                )&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(16.dp)&#10;        ) {&#10;            // Form Input&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = if (isEditing) &quot;Edit Catatan&quot; else &quot;Tambah Catatan Baru&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    OutlinedTextField(&#10;                        value = title,&#10;                        onValueChange = { title = it },&#10;                        label = { Text(&quot;Judul&quot;) },&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    OutlinedTextField(&#10;                        value = content,&#10;                        onValueChange = { content = it },&#10;                        label = { Text(&quot;Konten&quot;) },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(120.dp),&#10;                        maxLines = 5&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                    ) {&#10;                        Button(&#10;                            onClick = {},&#10;                            modifier = Modifier.weight(1f)&#10;                        ) {&#10;                            Text(if (isEditing) &quot;Update Catatan&quot; else &quot;Simpan Catatan&quot;)&#10;                        }&#10;&#10;                        if (isEditing) {&#10;                            OutlinedButton(&#10;                                onClick = { isEditing = false },&#10;                                modifier = Modifier.weight(1f)&#10;                            ) {&#10;                                Text(&quot;Batal&quot;)&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // Daftar Catatan&#10;            Text(&#10;                text = &quot;Daftar Catatan&quot;,&#10;                style = MaterialTheme.typography.titleLarge,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            if (notes.isEmpty()) {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Belum ada catatan.\nTambahkan catatan pertama Anda!&quot;,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            } else {&#10;                LazyColumn(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    items(notes) { note -&gt;&#10;                        NoteItem(&#10;                            note = note,&#10;                            onEdit = { isEditing = true },&#10;                            onDelete = {}&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.notesapp&#10;&#10;import android.os.Bundle&#10;import android.widget.Toast&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material.icons.filled.Edit&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.runtime.livedata.observeAsState&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.notesapp.model.Note&#10;import com.example.notesapp.ui.theme.NotesappTheme&#10;import com.example.notesapp.viewmodel.NoteViewModel&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            NotesappTheme {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    NotesApp()&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun NotesApp(noteViewModel: NoteViewModel = viewModel()) {&#10;    val notes by noteViewModel.notes.observeAsState(emptyList())&#10;    val isLoading by noteViewModel.isLoading.observeAsState(false)&#10;    val context = LocalContext.current&#10;&#10;    var title by remember { mutableStateOf(&quot;&quot;) }&#10;    var content by remember { mutableStateOf(&quot;&quot;) }&#10;    var isEditing by remember { mutableStateOf(false) }&#10;    var editingNoteId by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    LaunchedEffect(Unit) {&#10;        noteViewModel.fetchNotes()&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Notes App&quot;) },&#10;                colors = TopAppBarDefaults.topAppBarColors(&#10;                    containerColor = MaterialTheme.colorScheme.primaryContainer,&#10;                    titleContentColor = MaterialTheme.colorScheme.onPrimaryContainer&#10;                )&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(16.dp)&#10;        ) {&#10;            // Form Input&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = if (isEditing) &quot;Edit Catatan&quot; else &quot;Tambah Catatan Baru&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    OutlinedTextField(&#10;                        value = title,&#10;                        onValueChange = { title = it },&#10;                        label = { Text(&quot;Judul&quot;) },&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    OutlinedTextField(&#10;                        value = content,&#10;                        onValueChange = { content = it },&#10;                        label = { Text(&quot;Konten&quot;) },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(120.dp),&#10;                        maxLines = 5&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                    ) {&#10;                        Button(&#10;                            onClick = {&#10;                                if (isEditing) {&#10;                                    noteViewModel.updateNote(&#10;                                        noteId = editingNoteId,&#10;                                        title = title,&#10;                                        content = content,&#10;                                        onSuccess = {&#10;                                            Toast.makeText(context, &quot;Catatan berhasil diupdate&quot;, Toast.LENGTH_SHORT).show()&#10;                                            title = &quot;&quot;&#10;                                            content = &quot;&quot;&#10;                                            isEditing = false&#10;                                            editingNoteId = &quot;&quot;&#10;                                        },&#10;                                        onError = { error -&gt;&#10;                                            Toast.makeText(context, error, Toast.LENGTH_SHORT).show()&#10;                                        }&#10;                                    )&#10;                                } else {&#10;                                    noteViewModel.addNote(&#10;                                        title = title,&#10;                                        content = content,&#10;                                        onSuccess = {&#10;                                            Toast.makeText(context, &quot;Catatan berhasil ditambahkan&quot;, Toast.LENGTH_SHORT).show()&#10;                                            title = &quot;&quot;&#10;                                            content = &quot;&quot;&#10;                                        },&#10;                                        onError = { error -&gt;&#10;                                            Toast.makeText(context, error, Toast.LENGTH_SHORT).show()&#10;                                        }&#10;                                    )&#10;                                }&#10;                            },&#10;                            modifier = Modifier.weight(1f)&#10;                        ) {&#10;                            Text(if (isEditing) &quot;Update Catatan&quot; else &quot;Simpan Catatan&quot;)&#10;                        }&#10;&#10;                        if (isEditing) {&#10;                            OutlinedButton(&#10;                                onClick = {&#10;                                    title = &quot;&quot;&#10;                                    content = &quot;&quot;&#10;                                    isEditing = false&#10;                                    editingNoteId = &quot;&quot;&#10;                                },&#10;                                modifier = Modifier.weight(1f)&#10;                            ) {&#10;                                Text(&quot;Batal&quot;)&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // Daftar Catatan&#10;            Text(&#10;                text = &quot;Daftar Catatan&quot;,&#10;                style = MaterialTheme.typography.titleLarge,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            if (isLoading) {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    CircularProgressIndicator()&#10;                }&#10;            } else if (notes.isEmpty()) {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Belum ada catatan.\nTambahkan catatan pertama Anda!&quot;,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            } else {&#10;                LazyColumn(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    items(notes) { note -&gt;&#10;                        NoteItem(&#10;                            note = note,&#10;                            onEdit = {&#10;                                title = note.title&#10;                                content = note.content&#10;                                isEditing = true&#10;                                editingNoteId = note.id&#10;                            },&#10;                            onDelete = {&#10;                                noteViewModel.deleteNote(&#10;                                    noteId = note.id,&#10;                                    onSuccess = {&#10;                                        Toast.makeText(context, &quot;Catatan berhasil dihapus&quot;, Toast.LENGTH_SHORT).show()&#10;                                    },&#10;                                    onError = { error -&gt;&#10;                                        Toast.makeText(context, error, Toast.LENGTH_SHORT).show()&#10;                                    }&#10;                                )&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun NoteItem(&#10;    note: Note,&#10;    onEdit: () -&gt; Unit,&#10;    onDelete: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = note.title,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;&#10;                Row {&#10;                    IconButton(onClick = onEdit) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Edit,&#10;                            contentDescription = &quot;Edit&quot;,&#10;                            tint = MaterialTheme.colorScheme.primary&#10;                        )&#10;                    }&#10;                    IconButton(onClick = onDelete) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Delete,&#10;                            contentDescription = &quot;Delete&quot;,&#10;                            tint = MaterialTheme.colorScheme.error&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;&#10;            Text(&#10;                text = note.content,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Text(&#10;                text = formatTimestamp(note.timestamp),&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;fun formatTimestamp(timestamp: Long): String {&#10;    val sdf = SimpleDateFormat(&quot;dd MMM yyyy, HH:mm&quot;, Locale(&quot;id&quot;, &quot;ID&quot;))&#10;    return sdf.format(Date(timestamp))&#10;}&#10;&#10;// ==================== PREVIEW FUNCTIONS ====================&#10;&#10;@Preview(showBackground = true, name = &quot;Notes App - Empty State&quot;)&#10;@Composable&#10;fun PreviewNotesAppEmpty() {&#10;    NotesappTheme {&#10;        Surface(&#10;            modifier = Modifier.fillMaxSize(),&#10;            color = MaterialTheme.colorScheme.background&#10;        ) {&#10;            PreviewNotesAppContent(notes = emptyList())&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true, name = &quot;Notes App - With Data&quot;)&#10;@Composable&#10;fun PreviewNotesAppWithData() {&#10;    NotesappTheme {&#10;        Surface(&#10;            modifier = Modifier.fillMaxSize(),&#10;            color = MaterialTheme.colorScheme.background&#10;        ) {&#10;            PreviewNotesAppContent(&#10;                notes = listOf(&#10;                    Note(&#10;                        id = &quot;1&quot;,&#10;                        title = &quot;Belajar Jetpack Compose&quot;,&#10;                        content = &quot;Compose adalah toolkit modern untuk membuat UI Android dengan Kotlin&quot;,&#10;                        timestamp = System.currentTimeMillis()&#10;                    ),&#10;                    Note(&#10;                        id = &quot;2&quot;,&#10;                        title = &quot;Integrasi Firebase&quot;,&#10;                        content = &quot;Firebase Firestore menyediakan database real-time yang mudah digunakan&quot;,&#10;                        timestamp = System.currentTimeMillis() - 3600000&#10;                    ),&#10;                    Note(&#10;                        id = &quot;3&quot;,&#10;                        title = &quot;MVVM Architecture&quot;,&#10;                        content = &quot;Model-View-ViewModel memisahkan logika bisnis dari UI&quot;,&#10;                        timestamp = System.currentTimeMillis() - 7200000&#10;                    )&#10;                )&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true, name = &quot;Single Note Item&quot;)&#10;@Composable&#10;fun PreviewNoteItem() {&#10;    NotesappTheme {&#10;        NoteItem(&#10;            note = Note(&#10;                id = &quot;1&quot;,&#10;                title = &quot;Judul Catatan Preview&quot;,&#10;                content = &quot;Ini adalah contoh isi dari catatan yang akan ditampilkan. Anda bisa mengedit atau menghapus catatan ini.&quot;,&#10;                timestamp = System.currentTimeMillis()&#10;            ),&#10;            onEdit = {},&#10;            onDelete = {}&#10;        )&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true, name = &quot;Note Item - Long Content&quot;)&#10;@Composable&#10;fun PreviewNoteItemLong() {&#10;    NotesappTheme {&#10;        NoteItem(&#10;            note = Note(&#10;                id = &quot;2&quot;,&#10;                title = &quot;Catatan Panjang&quot;,&#10;                content = &quot;Ini adalah contoh catatan dengan konten yang sangat panjang. &quot; +&#10;                        &quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit. &quot; +&#10;                        &quot;Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. &quot; +&#10;                        &quot;Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris.&quot;,&#10;                timestamp = System.currentTimeMillis() - 86400000&#10;            ),&#10;            onEdit = {},&#10;            onDelete = {}&#10;        )&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true, name = &quot;Form Input - Add Mode&quot;, heightDp = 400)&#10;@Composable&#10;fun PreviewFormAdd() {&#10;    NotesappTheme {&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Tambah Catatan Baru&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                OutlinedTextField(&#10;                    value = &quot;&quot;,&#10;                    onValueChange = {},&#10;                    label = { Text(&quot;Judul&quot;) },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                OutlinedTextField(&#10;                    value = &quot;&quot;,&#10;                    onValueChange = {},&#10;                    label = { Text(&quot;Konten&quot;) },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(120.dp),&#10;                    maxLines = 5&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                Button(&#10;                    onClick = {},&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Text(&quot;Simpan Catatan&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true, name = &quot;Form Input - Edit Mode&quot;, heightDp = 450)&#10;@Composable&#10;fun PreviewFormEdit() {&#10;    NotesappTheme {&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Edit Catatan&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                OutlinedTextField(&#10;                    value = &quot;Belajar Android&quot;,&#10;                    onValueChange = {},&#10;                    label = { Text(&quot;Judul&quot;) },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                OutlinedTextField(&#10;                    value = &quot;Membuat aplikasi NotesApp dengan Firebase Firestore&quot;,&#10;                    onValueChange = {},&#10;                    label = { Text(&quot;Konten&quot;) },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(120.dp),&#10;                    maxLines = 5&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    Button(&#10;                        onClick = {},&#10;                        modifier = Modifier.weight(1f)&#10;                    ) {&#10;                        Text(&quot;Update Catatan&quot;)&#10;                    }&#10;&#10;                    OutlinedButton(&#10;                        onClick = {},&#10;                        modifier = Modifier.weight(1f)&#10;                    ) {&#10;                        Text(&quot;Batal&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun PreviewNotesAppContent(notes: List&lt;Note&gt;) {&#10;    var title by remember { mutableStateOf(&quot;&quot;) }&#10;    var content by remember { mutableStateOf(&quot;&quot;) }&#10;    var isEditing by remember { mutableStateOf(false) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Notes App&quot;) },&#10;                colors = TopAppBarDefaults.topAppBarColors(&#10;                    containerColor = MaterialTheme.colorScheme.primaryContainer,&#10;                    titleContentColor = MaterialTheme.colorScheme.onPrimaryContainer&#10;                )&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(16.dp)&#10;        ) {&#10;            // Form Input&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = if (isEditing) &quot;Edit Catatan&quot; else &quot;Tambah Catatan Baru&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    OutlinedTextField(&#10;                        value = title,&#10;                        onValueChange = { title = it },&#10;                        label = { Text(&quot;Judul&quot;) },&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    OutlinedTextField(&#10;                        value = content,&#10;                        onValueChange = { content = it },&#10;                        label = { Text(&quot;Konten&quot;) },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(120.dp),&#10;                        maxLines = 5&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                    ) {&#10;                        Button(&#10;                            onClick = {},&#10;                            modifier = Modifier.weight(1f)&#10;                        ) {&#10;                            Text(if (isEditing) &quot;Update Catatan&quot; else &quot;Simpan Catatan&quot;)&#10;                        }&#10;&#10;                        if (isEditing) {&#10;                            OutlinedButton(&#10;                                onClick = { isEditing = false },&#10;                                modifier = Modifier.weight(1f)&#10;                            ) {&#10;                                Text(&quot;Batal&quot;)&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // Daftar Catatan&#10;            Text(&#10;                text = &quot;Daftar Catatan&quot;,&#10;                style = MaterialTheme.typography.titleLarge,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            if (notes.isEmpty()) {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Belum ada catatan.\nTambahkan catatan pertama Anda!&quot;,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            } else {&#10;                LazyColumn(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    items(notes) { note -&gt;&#10;                        NoteItem(&#10;                            note = note,&#10;                            onEdit = { isEditing = true },&#10;                            onDelete = {}&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/notesapp/model/Note.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/notesapp/model/Note.kt" />
              <option name="originalContent" value="package com.example.notesapp.model&#10;&#10;data class Note(&#10;    val id: String = &quot;&quot;,&#10;    val title: String = &quot;&quot;,&#10;    val content: String = &quot;&quot;,&#10;    val timestamp: Long = System.currentTimeMillis()&#10;)&#10;" />
              <option name="updatedContent" value="package com.example.notesapp.model&#10;&#10;data class Note(&#10;    val id: String = &quot;&quot;,&#10;    val title: String = &quot;&quot;,&#10;    val content: String = &quot;&quot;,&#10;    val timestamp: Long = System.currentTimeMillis()&#10;)&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>